openapi: 3.0.0   # Open api version

info:
  title: LMKor
  version: "v0.1"
  contact:
    name: AInizer - Lee hoseop
  description: |
    This app is LMKor
    ---
      How to use:

      * First, Select the function to be used first..
      * And then, Fill text and samples. Samples is the number of results to generate.
      * If you choose generate, fill in the length as well. length is the length of the result produced.
      * If samples or length is so big, generate time will be long.
    ---
    And you can use this in [demo page](https://main-l-mkor-fpem123.endpoint.ainize.ai/).

    Origin Git repo >> [kiyoungkim1/LMkor](https://github.com/kiyoungkim1/LMkor)

servers:
  - url: https://main-l-mkor-fpem123.endpoint.ainize.ai/

paths:
  /bert:
    post:
      requestBody:
        required: true
        description: |
          This request estimates the <mask>. text must include <mask>.

          Request body example

              text: 안녕하세요 저는 학생입니다. 그리고 저의 취미는 <mask> 입니다.
              samples: 3

          curl example

              curl -X POST "https://main-l-mkor-fpem123.endpoint.ainize.ai/bert" -H "accept: application/json" -H "Content-Type: multipart/form-data" -F "text=안녕하세요 저는 학생입니다. 그리고 저의 취미는 <mask> 입니다." -F "samples=3"

        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: "The text to predict. Must include <mask>."
                samples:
                  type: string
                  description: "Number of result. 1~10"
              required:
                - text
                - samples
      responses: # Set response
        '200':
          description: "Successful Response"
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad Request Error"
        '429':
          description: "Too many requests"
        '500':
          description: "Server-side Error"

  /albert:
    post:
      requestBody:
        required: true
        description: |
          This request estimates the <mask>. text must include <mask>.

          Request body example

              text: 안녕하세요 저는 학생입니다. 그리고 저의 취미는 <mask> 입니다.
              samples: 3

          curl example

              curl -X POST "https://main-l-mkor-fpem123.endpoint.ainize.ai/albert" -H "accept: application/json" -H "Content-Type: multipart/form-data" -F "text=안녕하세요 저는 학생입니다. 그리고 저의 취미는 <mask> 입니다." -F "samples=3"

        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: "The text to predict. Must include <mask>."
                samples:
                  type: string
                  description: "Number of result. 1~10"
              required:
                - text
                - samples
      responses: # Set response
        '200':
          description: "Successful Response"
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad Request Error"
        '429':
          description: "Too many requests"
        '500':
          description: "Server-side Error"


  /gpt-3:
    post:
      requestBody:
        required: true
        description: |
          This request takes text and generates long text.

          Request body example

              text: 안녕하세요.
              samples: 1
              length: 150

          curl example

              curl -X POST "https://main-l-mkor-fpem123.endpoint.ainize.ai/gpt-3" -H "accept: application/json" -H "Content-Type: multipart/form-data" -F "text=안녕하세요." -F "samples=1" -F "length=150"

        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: "Base of text to be generated."
                samples:
                  type: string
                  description: "Number of result."
                length:
                  type: string
                  description: "The size of text."
              required:
                - text
                - samples
                - length
      responses: # Set response
        '200':
          description: "Successful Response"
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad Request Error"
        '429':
          description: "Too many requests"
        '500':
          description: "Server-side Error"


  /summarize:
    post:
      requestBody:
        required: true
        description: |
          This request summarizes the text.

          Request body example

              name: 안녕하세요 요즘 코로나 때문에 밖에 나가기도 힘들고 집에서 보내는 시간이 더 많은데요,,! 그래서 집에서 간단하게 할 수 있는 요리들을 많이 만들게 되는 것 같아요!! 특히, 에어프라이어는 진짜 필수템이라고 할만큼, 없으면 안되는 식품 중 하나인데 이번에 제가 사용해볼 에어프라이어 제품은에어프라이어 추천 제품! 에어메이드 에어프라이어를 소개해드릴게요 : )
              samples: 3

          curl example

              ccurl -X POST "https://main-l-mkor-fpem123.endpoint.ainize.ai/summarize" -H "accept: application/json" -H "Content-Type: multipart/form-data" -F "text=안녕하세요 요즘 코로나 때문에 밖에 나가기도 힘들고 집에서 보내는 시간이 더 많은데요,,! 그래서 집에서 간단하게 할 수 있는 요리들을 많이 만들게 되는 것 같아요!! 특히, 에어프라이어는 진짜 필수템이라고 할만큼, 없으면 안되는 식품 중 하나인데 이번에 제가 사용해볼 에어프라이어 제품은에어프라이어 추천 제품! 에어메이드 에어프라이어를 소개해드릴게요 : )" -F "samples=3"

        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: "Text to summarize."
                samples:
                  type: string
                  description: "Number of result."
              required:
                - text
                - samples
      responses: # Set response
        '200':
          description: "Successful Response"
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad Request Error"
        '429':
          description: "Too many requests"
        '500':
          description: "Server-side Error"



